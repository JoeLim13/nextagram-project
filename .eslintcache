[{"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\index.js":"1","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\App.js":"2","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\reportWebVitals.js":"3","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\Homepage.js":"4","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\HomePage.js":"5","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\LoadingIndicator.js":"6","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\UserProfilePage.js":"7","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\containers\\UserImages.js":"8","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\NavBarDisplay.js":"9","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\AuthModal.js":"10","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\LoginForm.js":"11","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\SignUpForm.js":"12","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\MyProfilePage.js":"13","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\UploadPage.js":"14"},{"size":693,"mtime":1607472434255,"results":"15","hashOfConfig":"16"},{"size":1626,"mtime":1607662735549,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":1082,"mtime":1606964902044,"results":"19","hashOfConfig":"20"},{"size":1600,"mtime":1607681526730,"results":"21","hashOfConfig":"16"},{"size":1294,"mtime":1607306024000,"results":"22","hashOfConfig":"16"},{"size":1007,"mtime":1607481892390,"results":"23","hashOfConfig":"16"},{"size":1308,"mtime":1607681845777,"results":"24","hashOfConfig":"16"},{"size":2760,"mtime":1607681616069,"results":"25","hashOfConfig":"16"},{"size":743,"mtime":1607576072251,"results":"26","hashOfConfig":"16"},{"size":2691,"mtime":1607583455302,"results":"27","hashOfConfig":"16"},{"size":8129,"mtime":1607577913416,"results":"28","hashOfConfig":"16"},{"size":1387,"mtime":1607681708496,"results":"29","hashOfConfig":"16"},{"size":2760,"mtime":1607653952351,"results":"30","hashOfConfig":"16"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1w5yicm",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1mxw9t3",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"33"},"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\index.js",[],["63","64"],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\App.js",[],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\reportWebVitals.js",[],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\Homepage.js",["65"],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\HomePage.js",[],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\LoadingIndicator.js",[],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\UserProfilePage.js",[],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\containers\\UserImages.js",["66","67","68"],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\NavBarDisplay.js",["69"],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\AuthModal.js",[],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\LoginForm.js",["70"],"import React, { useState } from \"react\"\r\nimport { ModalHeader, ModalBody, ModalFooter, Button, Form, FormGroup, Label, Input } from \"reactstrap\"\r\nimport axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst LoginForm = ({ toggleIsLogin, toggle, setLoggedIn }) => {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault()\r\n        axios({\r\n            method: 'post',\r\n            url: 'https://insta.nextacademy.com/api/v1/login',\r\n            data: {\r\n                username: username,\r\n                password: password\r\n            }\r\n        }).then(result => {\r\n            console.log(result)\r\n            localStorage.setItem(\"jwt\", result.data.auth_token)\r\n            setLoggedIn(true)\r\n            setUsername(\"\")\r\n            setPassword(\"\")\r\n            toggle()\r\n            history.push(\"/profile\")\r\n            toast.success('Logged In', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n\r\n            localStorage.setItem(\"user\", JSON.stringify(result.data.user))\r\n        })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return <>\r\n        <Form>\r\n            <ModalHeader toggle={toggle}>Log In</ModalHeader>\r\n            <ModalBody>\r\n                <FormGroup>\r\n                    <Label for=\"username\">Username</Label>\r\n                    <Input type=\"username\" name=\"username\" id=\"username\" placeholder=\"username\" value={username} onChange={(e) => { setUsername(e.target.value) }} />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">Password</Label>\r\n                    <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"password\" value={password} onChange={(e) => { setPassword(e.target.value) }} />\r\n                </FormGroup>\r\n                <p>New member? <a href=\"#\" onClick={(e) => {\r\n                    e.preventDefault()\r\n                    toggleIsLogin()\r\n                }}>Sign up here</a></p>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={handleLogin}>Log In</Button>{' '}\r\n                <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Form>\r\n    </>\r\n\r\n}\r\n\r\n\r\nexport default LoginForm","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\components\\SignUpForm.js",["71","72"],"import React, { useState } from \"react\"\r\nimport { ModalHeader, ModalBody, ModalFooter, Button, Form, FormGroup, Label, Input, FormText, FormFeedback } from \"reactstrap\"\r\nimport axios from \"axios\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nconst SignUpForm = ({ toggleIsLogin, toggle }) => {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [delay, setDelay] = useState(null);\r\n    const [usernameValid, setUsernameValid] = useState(true);\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n    //Username Setup\r\n    const handleSubmit = () => {\r\n        axios({\r\n            method: 'POST',\r\n            url: 'https://insta.nextacademy.com/api/v1/users/',\r\n            data: {\r\n                username: username,\r\n                email: email,\r\n                password: password\r\n            }\r\n        })\r\n            .then(response => {\r\n                console.log(response)\r\n                toast(response.data.message, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                error.response.data.message.forEach((message) => {\r\n                    toast.error(message, {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });\r\n                })\r\n\r\n                console.error(error.response) // so that we know what went wrong if the request failed\r\n            })\r\n    }\r\n\r\n    const checkUsername = newUsername => {\r\n        // this should only trigger after you stop typing for 500ms\r\n        console.log(\"Making API call to check username!\");\r\n        axios\r\n            .get(\r\n                `https://insta.nextacademy.com/api/v1/users/check_name?username=${newUsername}`\r\n            )\r\n            .then(response => {\r\n                console.log(response.data);\r\n                if (response.data.valid) {\r\n                    setUsernameValid(true);\r\n                } else {\r\n                    setUsernameValid(false);\r\n                }\r\n            });\r\n    };\r\n\r\n    const handleUsernameInput = e => {\r\n        // clears queue so that the old keystrokes don't trigger axios call\r\n        clearTimeout(delay);\r\n        const newUsername = e.target.value;\r\n        setUsername(newUsername);\r\n\r\n        // put each new keystroke into the queue\r\n        const newDelay = setTimeout(() => {\r\n            checkUsername(newUsername);\r\n        }, 500);\r\n\r\n        setDelay(newDelay);\r\n    };\r\n\r\n    const getInputProp = () => {\r\n        if (!username.length) {\r\n            return null;\r\n        }\r\n\r\n        if (username.length <= 6) {\r\n            return { invalid: true };\r\n        }\r\n\r\n        if (usernameValid) {\r\n            return { valid: true };\r\n        } else {\r\n            return { invalid: true };\r\n        }\r\n    };\r\n\r\n    const getFormFeedback = () => {\r\n        if (!username.length) {\r\n            return null;\r\n        }\r\n\r\n        if (username.length <= 6) {\r\n            return <FormFeedback invalid>Must be at least 6 characters</FormFeedback>;\r\n        }\r\n\r\n        if (usernameValid) {\r\n            return <FormFeedback valid>Sweet! That name is available</FormFeedback>;\r\n        } else {\r\n            return <FormFeedback invalid>Sorry! Username is taken</FormFeedback>;\r\n        }\r\n    };\r\n\r\n    //Password Setup\r\n    const getPasswordProp = () => {\r\n        if (!password.length) {\r\n            return null;\r\n        }\r\n\r\n        if (password.length <= 6) {\r\n            return { invalid: true };\r\n        } else {\r\n            return { valid: true };\r\n        }\r\n    }\r\n    const getFormPasswordFeedback = () => {\r\n        if (!password.length) {\r\n            return null;\r\n        }\r\n\r\n        if (password.length <= 6) {\r\n            return <FormFeedback invalid>Password is too short</FormFeedback>;\r\n        } else {\r\n            return <FormFeedback valid>Password is strong</FormFeedback>;\r\n        }\r\n    };\r\n    //Confirm Password Setup\r\n    const confirmPasswordHandler = (e) => {\r\n        setConfirmPassword(e.target.value);\r\n    }\r\n    const getConfirmPasswordProp = () => {\r\n        if (!confirmPassword.length) {\r\n            return null;\r\n        }\r\n\r\n        if (confirmPassword === password) {\r\n            return { valid: true };\r\n        } else {\r\n            return { invalid: true };\r\n        }\r\n    }\r\n    const getFormConfirmPasswordFeedback = () => {\r\n        if (!confirmPassword.length) {\r\n            return null;\r\n        }\r\n\r\n        if (confirmPassword === password) {\r\n            return <FormFeedback valid>Password is correct</FormFeedback>;\r\n        } else {\r\n            return <FormFeedback invalid>Password does not match</FormFeedback>;\r\n        }\r\n    };\r\n    // Email Setup\r\n    const getEmailProp = () => {\r\n        if (!email.length) {\r\n            return null;\r\n        }\r\n        if (!email.includes(\"@\")) {\r\n            return { invalid: true };\r\n        } else {\r\n            return { valid: true };\r\n        }\r\n    }\r\n\r\n    const getEmailFeedback = () => {\r\n        if (!email.length) {\r\n            return null;\r\n        }\r\n\r\n        if (!email.includes(\"@\")) {\r\n            return <FormFeedback invalid>Email is invalid</FormFeedback>;\r\n        } else {\r\n            return <FormFeedback valid>Correct Email</FormFeedback>;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return <>\r\n        <Form>\r\n            <ModalHeader toggle={toggle}>Sign Up</ModalHeader>\r\n            <ModalBody>\r\n                <FormGroup>\r\n                    <Label for=\"username\">Username</Label>\r\n                    <Input type=\"username\" name=\"username\" id=\"username\" placeholder=\"Key in username\" value={username} onChange={(e) => { setUsername(e.target.value) }} onChange={handleUsernameInput} {...getInputProp()} />\r\n                    {getFormFeedback()}\r\n                    <FormText>Enter a username between 6 and 20 characters</FormText>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"email\">Email</Label>\r\n                    <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Key in email\" value={email} onChange={(e) => { setEmail(e.target.value) }} {...getEmailProp()} />\r\n                    {getEmailFeedback()}\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">Password</Label>\r\n                    <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Key in password\" value={password} onChange={(e) => { setPassword(e.target.value) }} {...getPasswordProp()} />{getFormPasswordFeedback()}\r\n                    <FormText>Enter a password of at least 6 characters long </FormText>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Input type=\"password\" name=\"confirm-password\" id=\"confirm-password\" placeholder=\"Confirm Password\" value={confirmPassword} onChange={confirmPasswordHandler} {...getConfirmPasswordProp()} />{getFormConfirmPasswordFeedback()}\r\n                </FormGroup>\r\n                <p>Already a member? <a href=\"#\" onClick={(e) => {\r\n                    e.preventDefault()\r\n                    toggleIsLogin()\r\n                }}>Log in here</a></p>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    color=\"primary\"\r\n                    disabled={!(username && email && password)}\r\n                    onClick={handleSubmit}>Sign Up</Button>{' '}\r\n                <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Form>\r\n    </>\r\n}\r\n\r\nexport default SignUpForm","D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\MyProfilePage.js",[],"D:\\Microsoft VS Code\\NOV NEXT BOOTCAMP\\Week 3 Day 13\\nextagram-project\\src\\pages\\UploadPage.js",["73"],"import React, { useState } from 'react';\r\nimport { Button, Form, FormGroup, FormText, Input } from \"reactstrap\"\r\nimport axios from 'axios'\r\n\r\nconst UploadPage = () => {\r\n    const [imageFile, setImageFile] = useState(null)\r\n    const [previewImage, setPreviewImage] = useState(null)\r\n    const [message, setMessage] = useState('')\r\n\r\n    const handleImageFile = (e) => {\r\n        setPreviewImage(URL.createObjectURL(e.target.files[0]))\r\n        setImageFile(e.target.files[0])\r\n    }\r\n\r\n    const handleSubmitFile = (e) => {\r\n        // Prevent the default behaviour of the form submitting\r\n        e.preventDefault();\r\n        // Authorization of the user\r\n        let JWT = localStorage.getItem(\"jwt\");\r\n        // Formdata object to hold the image file to send to the server\r\n        let formData = new FormData();\r\n        // Append the key:value pair to the formData object\r\n        formData.append(\"image\", imageFile);\r\n\r\n        axios.post(\"https://insta.nextacademy.com/api/v1/images/\", formData, {\r\n            headers: { Authorization: `Bearer ${JWT}` }\r\n        })\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setMessage(\"Image Uploaded Successfully!\")\r\n                    setPreviewImage(null)\r\n                    setImageFile(null)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error.response);\r\n            });\r\n    };\r\n    return (\r\n        <> <div>\r\n            <div style={{ margin: 'auto', border: '10px solid blue', padding: '20px', width: '500px', height: '500px', boxSizing: 'border-box' }}>\r\n                {previewImage ? (\r\n                    <img\r\n                        src={previewImage}\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                    />\r\n                ) : (\r\n                        <h3 className=\"text-center\" style={{ paddingTop: '40%' }}>\r\n                            {message ? message : \"Live Preview\"}\r\n                        </h3>\r\n                    )}\r\n            </div>\r\n            <Form>\r\n                <FormGroup>\r\n                    <Input\r\n                        type=\"file\"\r\n                        name=\"image-file\"\r\n                        multiple=\"multiple\"\r\n                        onChange={handleImageFile}\r\n                    />\r\n                    <FormText color=\"muted\">\r\n                        Make sure the image being uploaded is a supported format.\r\n              </FormText>\r\n                </FormGroup>\r\n                <Button onClick={handleSubmitFile} type=\"submit\" color=\"primary\">\r\n                    Upload\r\n            </Button>\r\n            </Form>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UploadPage;",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":27,"column":21,"nodeType":"80","endLine":27,"endColumn":79},{"ruleId":"81","severity":1,"message":"82","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":14},{"ruleId":"81","severity":1,"message":"85","line":4,"column":16,"nodeType":"83","messageId":"84","endLine":4,"endColumn":23},{"ruleId":"86","severity":1,"message":"87","line":40,"column":13,"nodeType":"80","endLine":40,"endColumn":86},{"ruleId":"81","severity":1,"message":"88","line":15,"column":8,"nodeType":"83","messageId":"84","endLine":15,"endColumn":24},{"ruleId":"89","severity":1,"message":"90","line":59,"column":32,"nodeType":"80","endLine":62,"endColumn":20},{"ruleId":"91","severity":1,"message":"92","line":199,"column":171,"nodeType":"93","endLine":199,"endColumn":201},{"ruleId":"89","severity":1,"message":"90","line":216,"column":38,"nodeType":"80","endLine":219,"endColumn":20},{"ruleId":"78","severity":1,"message":"79","line":43,"column":21,"nodeType":"80","endLine":47,"endColumn":23},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'CardImg' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'LoadingIndicator' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]